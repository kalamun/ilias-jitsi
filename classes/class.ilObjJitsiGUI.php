<?php

use srag\DIC\Jitsi\DICTrait;
use srag\Plugins\Jitsi\Config\ConfigFormGUI;
use srag\Plugins\Jitsi\Jitsi\URI;
use srag\Plugins\Jitsi\ObjectSettings\ObjectSettings;
use srag\Plugins\Jitsi\ObjectSettings\ObjectSettingsFormGUI;
use srag\Plugins\Jitsi\Utils\JitsiTrait;

/**
 * Class ilObjJitsiGUI
 * Generated by SrPluginGenerator v1.3.5
 * @author            studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author            studer + raimann ag - Team Core 1 <support-core1@studer-raimann.ch>
 * @ilCtrl_isCalledBy ilObjJitsiGUI: ilRepositoryGUI
 * @ilCtrl_isCalledBy ilObjJitsiGUI: ilObjPluginDispatchGUI
 * @ilCtrl_isCalledBy ilObjJitsiGUI: ilAdministrationGUI
 * @ilCtrl_Calls      ilObjJitsiGUI: ilPermissionGUI
 * @ilCtrl_Calls      ilObjJitsiGUI: ilInfoScreenGUI
 * @ilCtrl_Calls      ilObjJitsiGUI: ilObjectCopyGUI
 * @ilCtrl_Calls      ilObjJitsiGUI: ilCommonActionDispatcherGUI
 */
class ilObjJitsiGUI extends ilObjectPluginGUI
{

    use DICTrait;
    use JitsiTrait;

    const PLUGIN_CLASS_NAME = ilJitsiPlugin::class;
//    const CMD_MANAGE_CONTENTS = "manageContents";
    const CMD_PERMISSIONS = "perm";
    const CMD_SETTINGS = "settings";
    const CMD_SETTINGS_STORE = "settingsStore";
    const CMD_SHOW_CONTENTS = "showContents";
    const LANG_MODULE_OBJECT = "object";
    const LANG_MODULE_SETTINGS = "settings";
    const TAB_CONTENTS = "contents";
    const TAB_PERMISSIONS = "perm_settings";
    const TAB_SETTINGS = "settings";
    const TAB_SHOW_CONTENTS = "show_contents";
    /**
     * @var ilObjJitsi
     */
    public $object;

    /**
     * @inheritDoc
     */
    protected function afterConstructor()/*: void*/
    {

    }

    /**
     * @inheritDoc
     */
    public final function getType() : string
    {
        return ilJitsiPlugin::PLUGIN_ID;
    }

    /**
     * @param string $cmd
     */
    public function performCommand(string $cmd)/*: void*/
    {
        self::dic()->help()->setScreenIdComponent(ilJitsiPlugin::PLUGIN_ID);

        $next_class = self::dic()->ctrl()->getNextClass($this);

        switch (strtolower($next_class)) {
            default:
                switch ($cmd) {
                    case self::CMD_SHOW_CONTENTS:
                        // Read commands
                        if (!ilObjJitsiAccess::hasReadAccess()) {
                            ilObjJitsiAccess::redirectNonAccess(ilRepositoryGUI::class);
                        }

                        $this->{$cmd}();
                        break;

//                    case self::CMD_MANAGE_CONTENTS:
                    case self::CMD_SETTINGS:
                    case self::CMD_SETTINGS_STORE:
                        // Write commands
                        if (!ilObjJitsiAccess::hasWriteAccess()) {
                            ilObjJitsiAccess::redirectNonAccess($this);
                        }

                        $this->{$cmd}();
                        break;

                    default:
                        // Unknown command
                        ilObjJitsiAccess::redirectNonAccess(ilRepositoryGUI::class);
                        break;
                }
                break;
        }
    }

    /**
     * @param string $html
     */
    protected function show(string $html)/*: void*/
    {
        if (!self::dic()->ctrl()->isAsynch()) {
            self::dic()->ui()->mainTemplate()->setTitle($this->object->getTitle());

            self::dic()->ui()->mainTemplate()->setDescription($this->object->getDescription());

            if (!$this->object->isOnline()) {
                self::dic()->ui()->mainTemplate()->setAlertProperties([
                    [
                        "alert"    => true,
                        "property" => self::plugin()->translate("status", self::LANG_MODULE_OBJECT),
                        "value"    => self::plugin()->translate("offline", self::LANG_MODULE_OBJECT)
                    ]
                ]);
            }
        }

        self::output()->output($html);
    }

    /**
     * @inheritDoc
     */
    public function initCreateForm(/*string*/ $a_new_type) : ilPropertyFormGUI
    {
        $form = parent::initCreateForm($a_new_type);

        return $form;
    }

    /**
     * @inheritDoc
     * @param ilObjJitsi $a_new_object
     */
    public function afterSave(/*ilObjJitsi*/ ilObject $a_new_object)/*: void*/
    {
        parent::afterSave($a_new_object);
    }

    /**
     *
     */
    protected function manageContents()/*: void*/
    {
        self::dic()->tabs()->activateTab(self::TAB_CONTENTS);

        // TODO: Implement manageContents
        $this->show("");
    }

    /**
     *
     */
    protected function showContents()/*: void*/
    {
        $DIC = self::dic();

        $DIC->tabs()->activateTab(self::TAB_SHOW_CONTENTS);
        $tpl = self::plugin()->getPluginObject()->getTemplate('tpl.meeting.html');

        // Menu
        $tpl->setVariable('MENU', ''); // Currently no menu

        // Domain
        $uri_from_config = self::jitsi()->config()->getValue(ConfigFormGUI::JITSI_URL) ?? 'https://meet.jit.si/';
        $uri             = new URI($uri_from_config);
        $tpl->setVariable('JITSI_DOMAIN', $uri->getAuthority());
        $tpl->setVariable('JITSI_DOMAIN_SCHEMA', $uri->getSchema());

        // Config and Start
        $id     = $this->object->getObjectSettings()->getJitsiId();
        $config = new srag\Plugins\Jitsi\Jitsi\Base($uri->getAuthority(), $id, 800);
        $config->getParticipant()->setDisplayName($DIC->user()->getFullname());
        $config->getParticipant()->setModerator(ilObjJitsiAccess::hasWriteAccess());
        $config->setRoomName($this->object->getTitle());
        $config->setPassword(ObjectSettings::randomString(8));

        $tpl->setVariable('JITSI_SETTINGS', $config->jsonSerialize());
        $this->show($tpl->get());
    }

    /**
     * @return ObjectSettingsFormGUI
     */
    protected function getSettingsForm() : ObjectSettingsFormGUI
    {
        $form = new ObjectSettingsFormGUI($this, $this->object);

        return $form;
    }

    /**
     *
     */
    protected function settings()/*: void*/
    {
        self::dic()->tabs()->activateTab(self::TAB_SETTINGS);

        $form = $this->getSettingsForm();

        self::output()->output($form);
    }

    /**
     *
     */
    protected function settingsStore()/*: void*/
    {
        self::dic()->tabs()->activateTab(self::TAB_SETTINGS);

        $form = $this->getSettingsForm();

        if (!$form->storeForm()) {
            self::output()->output($form);

            return;
        }

        ilUtil::sendSuccess(self::plugin()->translate("saved", self::LANG_MODULE_SETTINGS), true);

        self::dic()->ctrl()->redirect($this, self::CMD_SETTINGS);
    }

    /**
     *
     */
    protected function setTabs()/*: void*/
    {
        self::dic()->tabs()->addTab(self::TAB_SHOW_CONTENTS, self::plugin()->translate("show_contents", self::LANG_MODULE_OBJECT), self::dic()->ctrl()
                                                                                                                                       ->getLinkTarget($this, self::CMD_SHOW_CONTENTS));

        if (ilObjJitsiAccess::hasWriteAccess()) {
//            self::dic()->tabs()->addTab(self::TAB_CONTENTS, self::plugin()->translate("manage_contents", self::LANG_MODULE_OBJECT), self::dic()
//                                                                                                                                        ->ctrl()->getLinkTarget($this, self::CMD_MANAGE_CONTENTS));

            self::dic()->tabs()->addTab(self::TAB_SETTINGS, self::plugin()->translate("settings", self::LANG_MODULE_SETTINGS), self::dic()->ctrl()
                                                                                                                                   ->getLinkTarget($this, self::CMD_SETTINGS));
        }

        if (ilObjJitsiAccess::hasEditPermissionAccess()) {
            self::dic()->tabs()->addTab(self::TAB_PERMISSIONS, self::plugin()->translate(self::TAB_PERMISSIONS, "", [], false), self::dic()->ctrl()
                                                                                                                                    ->getLinkTargetByClass([
                                                                                                                                        self::class,
                                                                                                                                        ilPermissionGUI::class
                                                                                                                                    ], self::CMD_PERMISSIONS));
        }

        self::dic()->tabs()->manual_activation = true; // Show all tabs as links when no activation
    }

    /**
     * @return string
     */
    public static function getStartCmd() : string
    {
        if (ilObjJitsiAccess::hasWriteAccess()) {
            return self::CMD_SHOW_CONTENTS;
        }
        return self::CMD_SHOW_CONTENTS;
    }

    /**
     * @inheritDoc
     */
    public function getAfterCreationCmd() : string
    {
        return self::getStartCmd();
    }

    /**
     * @inheritDoc
     */
    public function getStandardCmd() : string
    {
        return self::getStartCmd();
    }
}

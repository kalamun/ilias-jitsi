<?php

namespace srag\Plugins\Jitsi\Config;

use ilJitsiConfigGUI;
use ilJitsiPlugin;
use ilTextInputGUI;
use srag\CustomInputGUIs\Jitsi\PropertyFormGUI\PropertyFormGUI;
use srag\Plugins\Jitsi\Utils\JitsiTrait;

/**
 * Class ConfigFormGUI
 * Generated by SrPluginGenerator v1.3.5
 * @package srag\Plugins\Jitsi\Config
 * @author  studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author  studer + raimann ag - Team Core 1 <support-core1@studer-raimann.ch>
 */
class ConfigFormGUI extends PropertyFormGUI
{

    use JitsiTrait;

    const PLUGIN_CLASS_NAME = ilJitsiPlugin::class;
    const LANG_MODULE = ilJitsiConfigGUI::LANG_MODULE;
    const JITSI_URL = 'jitsi_url';
    const LIST_TITLE = 'list_title';

    /**
     * ConfigFormGUI constructor
     * @param ilJitsiConfigGUI $parent
     */
    public function __construct(ilJitsiConfigGUI $parent)
    {
        parent::__construct($parent);
    }

    /**
     * @inheritDoc
     */
    protected function getValue(/*string*/ $key)
    {
        switch ($key) {
            default:
                return self::jitsi()->config()->getValue($key);
        }
    }

    /**
     * @inheritDoc
     */
    protected function initCommands()/*: void*/
    {
        $this->addCommandButton(ilJitsiConfigGUI::CMD_UPDATE_CONFIGURE, $this->txt('save'));
    }

    /**
     * @inheritDoc
     */
    protected function initFields()/*: void*/
    {
        $this->fields = [
            self::JITSI_URL => [
                self::PROPERTY_CLASS    => ilTextInputGUI::class,
                self::PROPERTY_REQUIRED => true
            ],
            //            self::LIST_TITLE => [
            //                self::PROPERTY_CLASS    => ilTextInputGUI::class,
            //                self::PROPERTY_REQUIRED => true,
            //            ],
        ];
    }

    /**
     * @inheritDoc
     */
    protected function initId()/*: void*/
    {

    }

    /**
     * @inheritDoc
     */
    protected function initTitle()/*: void*/
    {
        $this->setTitle($this->txt('configuration'));
    }

    /**
     * @inheritDoc
     */
    protected function storeValue(/*string*/ $key, $value)/*: void*/
    {
        switch ($key) {
            default:
                self::jitsi()->config()->setValue($key, $value);
                break;
        }
    }
}
